=begin
#CityPay Payment API

# This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 

Contact: support@citypay.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module CityPayApiClient
  class BatchProcessingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Batch Process Request
    # A batch process request is used to start the batch process workflow by uploading batch data and initialising a new batch for processing. Once validated the batch will be queued for processing and further updates can be received by a subsequent call to retrieve the batch status. 
    # @param process_batch_request [ProcessBatchRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ProcessBatchResponse]
    def batch_process_request(process_batch_request, opts = {})
      data, _status_code, _headers = batch_process_request_with_http_info(process_batch_request, opts)
      data
    end

    # Batch Process Request
    # A batch process request is used to start the batch process workflow by uploading batch data and initialising a new batch for processing. Once validated the batch will be queued for processing and further updates can be received by a subsequent call to retrieve the batch status. 
    # @param process_batch_request [ProcessBatchRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProcessBatchResponse, Integer, Hash)>] ProcessBatchResponse data, response status code and response headers
    def batch_process_request_with_http_info(process_batch_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchProcessingApi.batch_process_request ...'
      end
      # verify the required parameter 'process_batch_request' is set
      if @api_client.config.client_side_validation && process_batch_request.nil?
        fail ArgumentError, "Missing the required parameter 'process_batch_request' when calling BatchProcessingApi.batch_process_request"
      end
      # resource path
      local_var_path = '/v6/batch/process'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/xml'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(process_batch_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ProcessBatchResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cp-api-key']

      new_options = opts.merge(
        :operation => :"BatchProcessingApi.batch_process_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchProcessingApi#batch_process_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # BatchReportRequest
    # The report for a given batch.
    # @param batch_report_request [BatchReportRequest] 
    # @param [Hash] opts the optional parameters
    # @return [BatchReportResponseModel]
    def batch_retrieve_request(batch_report_request, opts = {})
      data, _status_code, _headers = batch_retrieve_request_with_http_info(batch_report_request, opts)
      data
    end

    # BatchReportRequest
    # The report for a given batch.
    # @param batch_report_request [BatchReportRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BatchReportResponseModel, Integer, Hash)>] BatchReportResponseModel data, response status code and response headers
    def batch_retrieve_request_with_http_info(batch_report_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchProcessingApi.batch_retrieve_request ...'
      end
      # verify the required parameter 'batch_report_request' is set
      if @api_client.config.client_side_validation && batch_report_request.nil?
        fail ArgumentError, "Missing the required parameter 'batch_report_request' when calling BatchProcessingApi.batch_retrieve_request"
      end
      # resource path
      local_var_path = '/v6/batch/retrieve'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/xml'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(batch_report_request)

      # return_type
      return_type = opts[:debug_return_type] || 'BatchReportResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cp-api-key']

      new_options = opts.merge(
        :operation => :"BatchProcessingApi.batch_retrieve_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchProcessingApi#batch_retrieve_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # CheckBatchStatus
    # The operation is used to retrieve the status of a batch process.
    # @param check_batch_status [CheckBatchStatus] 
    # @param [Hash] opts the optional parameters
    # @return [CheckBatchStatusResponse]
    def check_batch_status_request(check_batch_status, opts = {})
      data, _status_code, _headers = check_batch_status_request_with_http_info(check_batch_status, opts)
      data
    end

    # CheckBatchStatus
    # The operation is used to retrieve the status of a batch process.
    # @param check_batch_status [CheckBatchStatus] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckBatchStatusResponse, Integer, Hash)>] CheckBatchStatusResponse data, response status code and response headers
    def check_batch_status_request_with_http_info(check_batch_status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchProcessingApi.check_batch_status_request ...'
      end
      # verify the required parameter 'check_batch_status' is set
      if @api_client.config.client_side_validation && check_batch_status.nil?
        fail ArgumentError, "Missing the required parameter 'check_batch_status' when calling BatchProcessingApi.check_batch_status_request"
      end
      # resource path
      local_var_path = '/v6/batch/status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/xml'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(check_batch_status)

      # return_type
      return_type = opts[:debug_return_type] || 'CheckBatchStatusResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cp-api-key']

      new_options = opts.merge(
        :operation => :"BatchProcessingApi.check_batch_status_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchProcessingApi#check_batch_status_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
