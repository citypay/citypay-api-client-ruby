=begin
#CityPay Payment API

# This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 

Contact: support@citypay.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module CityPayApiClient
  class DirectPostApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Handles a CRes response from ACS, returning back the result of authorisation
    # Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid `threeDSSessionData` value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a `Direct Post` integration who wish to handle the challenge flow themselves. 
    # @param uuid [String] An identifier used to track the CReq/CRes cycle.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cres The CRES from the ACS.
    # @option opts [String] :three_ds_session_data The session data from the ACS.
    # @return [AuthResponse]
    def direct_c_res_auth_request(uuid, opts = {})
      data, _status_code, _headers = direct_c_res_auth_request_with_http_info(uuid, opts)
      data
    end

    # Handles a CRes response from ACS, returning back the result of authorisation
    # Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
    # @param uuid [String] An identifier used to track the CReq/CRes cycle.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cres The CRES from the ACS.
    # @option opts [String] :three_ds_session_data The session data from the ACS.
    # @return [Array<(AuthResponse, Integer, Hash)>] AuthResponse data, response status code and response headers
    def direct_c_res_auth_request_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DirectPostApi.direct_c_res_auth_request ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling DirectPostApi.direct_c_res_auth_request"
      end
      # resource path
      local_var_path = '/direct/cres/auth/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/x-www-form-urlencoded'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['cres'] = opts[:'cres'] if !opts[:'cres'].nil?
      form_params['threeDSSessionData'] = opts[:'three_ds_session_data'] if !opts[:'three_ds_session_data'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DirectPostApi.direct_c_res_auth_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DirectPostApi#direct_c_res_auth_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Handles a CRes response from ACS, returning back a token for future authorisation
    # Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid `threeDSSessionData` value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a `Direct Post` integration who wish to handle the challenge flow themselves. 
    # @param uuid [String] An identifier used to track the CReq/CRes cycle.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cres The CRES from the ACS.
    # @option opts [String] :three_ds_session_data The session data from the ACS.
    # @return [TokenisationResponseModel]
    def direct_c_res_tokenise_request(uuid, opts = {})
      data, _status_code, _headers = direct_c_res_tokenise_request_with_http_info(uuid, opts)
      data
    end

    # Handles a CRes response from ACS, returning back a token for future authorisation
    # Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
    # @param uuid [String] An identifier used to track the CReq/CRes cycle.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cres The CRES from the ACS.
    # @option opts [String] :three_ds_session_data The session data from the ACS.
    # @return [Array<(TokenisationResponseModel, Integer, Hash)>] TokenisationResponseModel data, response status code and response headers
    def direct_c_res_tokenise_request_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DirectPostApi.direct_c_res_tokenise_request ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling DirectPostApi.direct_c_res_tokenise_request"
      end
      # resource path
      local_var_path = '/direct/cres/tokenise/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/x-www-form-urlencoded'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['cres'] = opts[:'cres'] if !opts[:'cres'].nil?
      form_params['threeDSSessionData'] = opts[:'three_ds_session_data'] if !opts[:'three_ds_session_data'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TokenisationResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DirectPostApi.direct_c_res_tokenise_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DirectPostApi#direct_c_res_tokenise_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Direct Post Auth Request
    # Used to initiate a direct post request transaction flow.  <pre class=\"inline-code language-bash\"> <code> curl https://api.citypay.com/direct/auth?cp-domain-key=n834ytqp84y... \\  -d \"amount=7500&identifier=example_trans&cardnumber=4000000000000002&expmonth=9&expyear=2028&bill_to_postcode=L1+7ZW </code> </pre>. 
    # @param direct_post_request [DirectPostRequest] 
    # @param [Hash] opts the optional parameters
    # @return [AuthResponse]
    def direct_post_auth_request(direct_post_request, opts = {})
      data, _status_code, _headers = direct_post_auth_request_with_http_info(direct_post_request, opts)
      data
    end

    # Direct Post Auth Request
    # Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/direct/auth?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
    # @param direct_post_request [DirectPostRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthResponse, Integer, Hash)>] AuthResponse data, response status code and response headers
    def direct_post_auth_request_with_http_info(direct_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DirectPostApi.direct_post_auth_request ...'
      end
      # verify the required parameter 'direct_post_request' is set
      if @api_client.config.client_side_validation && direct_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'direct_post_request' when calling DirectPostApi.direct_post_auth_request"
      end
      # resource path
      local_var_path = '/direct/auth'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/x-www-form-urlencoded', 'text/xml'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'text/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(direct_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cp-domain-key', 'cp-api-key']

      new_options = opts.merge(
        :operation => :"DirectPostApi.direct_post_auth_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DirectPostApi#direct_post_auth_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Direct Post Tokenise Request
    # Used to initiate a direct post request transaction flow.  <pre class=\"inline-code language-bash\"> <code> curl https://api.citypay.com/v6/direct?cp-domain-key=n834ytqp84y... \\  -d \"amount=7500&identifier=example_trans&cardnumber=4000000000000002&expmonth=9&expyear=2028&bill_to_postcode=L1+7ZW </code> </pre>. 
    # @param direct_post_request [DirectPostRequest] 
    # @param [Hash] opts the optional parameters
    # @return [AuthResponse]
    def direct_post_tokenise_request(direct_post_request, opts = {})
      data, _status_code, _headers = direct_post_tokenise_request_with_http_info(direct_post_request, opts)
      data
    end

    # Direct Post Tokenise Request
    # Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
    # @param direct_post_request [DirectPostRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthResponse, Integer, Hash)>] AuthResponse data, response status code and response headers
    def direct_post_tokenise_request_with_http_info(direct_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DirectPostApi.direct_post_tokenise_request ...'
      end
      # verify the required parameter 'direct_post_request' is set
      if @api_client.config.client_side_validation && direct_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'direct_post_request' when calling DirectPostApi.direct_post_tokenise_request"
      end
      # resource path
      local_var_path = '/direct/tokenise'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/x-www-form-urlencoded', 'text/xml'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'text/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(direct_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cp-domain-key', 'cp-api-key']

      new_options = opts.merge(
        :operation => :"DirectPostApi.direct_post_tokenise_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DirectPostApi#direct_post_tokenise_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Direct Post Token Request
    # Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
    # @param direct_token_auth_request [DirectTokenAuthRequest] 
    # @param [Hash] opts the optional parameters
    # @return [AuthResponse]
    def token_request(direct_token_auth_request, opts = {})
      data, _status_code, _headers = token_request_with_http_info(direct_token_auth_request, opts)
      data
    end

    # Direct Post Token Request
    # Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
    # @param direct_token_auth_request [DirectTokenAuthRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthResponse, Integer, Hash)>] AuthResponse data, response status code and response headers
    def token_request_with_http_info(direct_token_auth_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DirectPostApi.token_request ...'
      end
      # verify the required parameter 'direct_token_auth_request' is set
      if @api_client.config.client_side_validation && direct_token_auth_request.nil?
        fail ArgumentError, "Missing the required parameter 'direct_token_auth_request' when calling DirectPostApi.token_request"
      end
      # resource path
      local_var_path = '/direct/token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/x-www-form-urlencoded', 'text/xml'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'text/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(direct_token_auth_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cp-domain-key', 'cp-api-key']

      new_options = opts.merge(
        :operation => :"DirectPostApi.token_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DirectPostApi#token_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
