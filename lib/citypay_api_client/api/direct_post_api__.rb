=begin
#CityPay Payment API

# Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 

Contact: support@citypay.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module CityPayApiClient
  class DirectPostApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Handles a CRes response from ACS, returning back the result of authorisation
    # Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid `threeDSSessionData` value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a `Direct Post` integration who wish to handle the challenge flow themselves. 
    # @param uuid [String] An identifier used to track the CReq/CRes cycle.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cres The CRES from the ACS.
    # @option opts [String] :three_ds_session_data The session data from the ACS.
    # @return [AuthResponse]
    def direct_c_res_auth_request(uuid, opts = {})
      data, _status_code, _headers = direct_c_res_auth_request_with_http_info(uuid, opts)
      data
    end

    # Handles a CRes response from ACS, returning back the result of authorisation
    # Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
    # @param uuid [String] An identifier used to track the CReq/CRes cycle.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cres The CRES from the ACS.
    # @option opts [String] :three_ds_session_data The session data from the ACS.
    # @return [Array<(AuthResponse, Integer, Hash)>] AuthResponse data, response status code and response headers
    def direct_c_res_auth_request_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DirectPostApi.direct_c_res_auth_request ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling DirectPostApi.direct_c_res_auth_request"
      end
      # resource path
      local_var_path = '/direct/cres/auth/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/x-www-form-urlencoded'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['cres'] = opts[:'cres'] if !opts[:'cres'].nil?
      form_params['threeDSSessionData'] = opts[:'three_ds_session_data'] if !opts[:'three_ds_session_data'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DirectPostApi.direct_c_res_auth_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DirectPostApi#direct_c_res_auth_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Handles a CRes response from ACS, returning back a token for future authorisation
    # Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid `threeDSSessionData` value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a `Direct Post` integration who wish to handle the challenge flow themselves. 
    # @param uuid [String] An identifier used to track the CReq/CRes cycle.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cres The CRES from the ACS.
    # @option opts [String] :three_ds_session_data The session data from the ACS.
    # @return [TokenisationResponseModel]
    def direct_c_res_tokenise_request(uuid, opts = {})
      data, _status_code, _headers = direct_c_res_tokenise_request_with_http_info(uuid, opts)
      data
    end

    # Handles a CRes response from ACS, returning back a token for future authorisation
    # Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
    # @param uuid [String] An identifier used to track the CReq/CRes cycle.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cres The CRES from the ACS.
    # @option opts [String] :three_ds_session_data The session data from the ACS.
    # @return [Array<(TokenisationResponseModel, Integer, Hash)>] TokenisationResponseModel data, response status code and response headers
    def direct_c_res_tokenise_request_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DirectPostApi.direct_c_res_tokenise_request ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling DirectPostApi.direct_c_res_tokenise_request"
      end
      # resource path
      local_var_path = '/direct/cres/tokenise/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/x-www-form-urlencoded'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['cres'] = opts[:'cres'] if !opts[:'cres'].nil?
      form_params['threeDSSessionData'] = opts[:'three_ds_session_data'] if !opts[:'three_ds_session_data'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TokenisationResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DirectPostApi.direct_c_res_tokenise_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DirectPostApi#direct_c_res_tokenise_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Direct Post Auth Request
    # Used to initiate a direct post request transaction flow. 
    # @param direct_post_request [DirectPostRequest] 
    # @param [Hash] opts the optional parameters
    # @return [AuthResponse]
    def direct_post_auth_request(direct_post_request, opts = {})
      data, _status_code, _headers = direct_post_auth_request_with_http_info(direct_post_request, opts)
      data
    end

    # Direct Post Auth Request
    # Used to initiate a direct post request transaction flow. 
    # @param direct_post_request [DirectPostRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthResponse, Integer, Hash)>] AuthResponse data, response status code and response headers
    def direct_post_auth_request_with_http_info(direct_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DirectPostApi.direct_post_auth_request ...'
      end
      # verify the required parameter 'direct_post_request' is set
      if @api_client.config.client_side_validation && direct_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'direct_post_request' when calling DirectPostApi.direct_post_auth_request"
      end
      # resource path
      local_var_path = '/direct/auth'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/x-www-form-urlencoded', 'text/xml'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'text/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(direct_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cp-domain-key', 'cp-api-key']

      new_options = opts.merge(
        :operation => :"DirectPostApi.direct_post_auth_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DirectPostApi#direct_post_auth_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Direct Post Tokenise Request
    # Used to initiate a direct post request transaction flow. 
    # @param direct_post_request [DirectPostRequest] 
    # @param [Hash] opts the optional parameters
    # @return [AuthResponse]
    def direct_post_tokenise_request(direct_post_request, opts = {})
      data, _status_code, _headers = direct_post_tokenise_request_with_http_info(direct_post_request, opts)
      data
    end

    # Direct Post Tokenise Request
    # Used to initiate a direct post request transaction flow. 
    # @param direct_post_request [DirectPostRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthResponse, Integer, Hash)>] AuthResponse data, response status code and response headers
    def direct_post_tokenise_request_with_http_info(direct_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DirectPostApi.direct_post_tokenise_request ...'
      end
      # verify the required parameter 'direct_post_request' is set
      if @api_client.config.client_side_validation && direct_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'direct_post_request' when calling DirectPostApi.direct_post_tokenise_request"
      end
      # resource path
      local_var_path = '/direct/tokenise'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/x-www-form-urlencoded', 'text/xml'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'text/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(direct_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cp-domain-key', 'cp-api-key']

      new_options = opts.merge(
        :operation => :"DirectPostApi.direct_post_tokenise_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DirectPostApi#direct_post_tokenise_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Direct Post Token Request
    # Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
    # @param direct_token_auth_request [DirectTokenAuthRequest] 
    # @param [Hash] opts the optional parameters
    # @return [AuthResponse]
    def token_request(direct_token_auth_request, opts = {})
      data, _status_code, _headers = token_request_with_http_info(direct_token_auth_request, opts)
      data
    end

    # Direct Post Token Request
    # Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
    # @param direct_token_auth_request [DirectTokenAuthRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthResponse, Integer, Hash)>] AuthResponse data, response status code and response headers
    def token_request_with_http_info(direct_token_auth_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DirectPostApi.token_request ...'
      end
      # verify the required parameter 'direct_token_auth_request' is set
      if @api_client.config.client_side_validation && direct_token_auth_request.nil?
        fail ArgumentError, "Missing the required parameter 'direct_token_auth_request' when calling DirectPostApi.token_request"
      end
      # resource path
      local_var_path = '/direct/token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'application/x-www-form-urlencoded', 'text/xml'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'text/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(direct_token_auth_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['cp-domain-key', 'cp-api-key']

      new_options = opts.merge(
        :operation => :"DirectPostApi.token_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DirectPostApi#token_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
