=begin
#CityPay Payment API

# This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 

Contact: support@citypay.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'date'
require 'time'

module CityPayApiClient
  class AirlineAdvice
    # The name of the airline carrier that generated the tickets for airline travel.
    attr_accessor :carrier_name

    # true if a conjunction ticket (with additional coupons) was issued for an itinerary with more than four segments. Defaults to false. 
    attr_accessor :conjunction_ticket_indicator

    # The Electronic Ticket Indicator, a code that indicates if an electronic ticket was issued.  Defaults to true.
    attr_accessor :eticket_indicator

    # A value that indicates the number of air travel segments included on this ticket.  Valid entries include the numerals “0” through “4”. Required only if the transaction type is TKT or EXC. 
    attr_accessor :no_air_segments

    # The number of people in the party.
    attr_accessor :number_in_party

    # Required if transaction type is EXC.
    attr_accessor :original_ticket_no

    # The name of the passenger when the traveller is not the card member that purchased the ticket. Required only if the transaction type is TKT or EXC.
    attr_accessor :passenger_name

    attr_accessor :segment1

    attr_accessor :segment2

    attr_accessor :segment3

    attr_accessor :segment4

    # The name of the city town or village where the transaction took place.
    attr_accessor :ticket_issue_city

    # The date the ticket was issued in ISO Date format (yyyy-MM-dd).
    attr_accessor :ticket_issue_date

    # The name of the agency generating the ticket.
    attr_accessor :ticket_issue_name

    # This must be a valid ticket number, i.e. numeric (the first 3 digits must represent the valid IATA plate carrier code). The final check digit should be validated prior to submission. On credit charges, this field should contain the number of the original ticket, and not of a replacement. 
    attr_accessor :ticket_no

    # This field contains the Transaction Type code assigned to this transaction. Valid codes include:   - `TKT` = Ticket Purchase   - `REF` = Refund   - `EXC` = Exchange Ticket   - `MSC` = Miscellaneous (non-Ticket Purchase- and non-Exchange Ticket-related transactions only). 
    attr_accessor :transaction_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'carrier_name' => :'carrier_name',
        :'conjunction_ticket_indicator' => :'conjunction_ticket_indicator',
        :'eticket_indicator' => :'eticket_indicator',
        :'no_air_segments' => :'no_air_segments',
        :'number_in_party' => :'number_in_party',
        :'original_ticket_no' => :'original_ticket_no',
        :'passenger_name' => :'passenger_name',
        :'segment1' => :'segment1',
        :'segment2' => :'segment2',
        :'segment3' => :'segment3',
        :'segment4' => :'segment4',
        :'ticket_issue_city' => :'ticket_issue_city',
        :'ticket_issue_date' => :'ticket_issue_date',
        :'ticket_issue_name' => :'ticket_issue_name',
        :'ticket_no' => :'ticket_no',
        :'transaction_type' => :'transaction_type'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'carrier_name' => :'String',
        :'conjunction_ticket_indicator' => :'Boolean',
        :'eticket_indicator' => :'Boolean',
        :'no_air_segments' => :'Integer',
        :'number_in_party' => :'Integer',
        :'original_ticket_no' => :'String',
        :'passenger_name' => :'String',
        :'segment1' => :'AirlineSegment',
        :'segment2' => :'AirlineSegment',
        :'segment3' => :'AirlineSegment',
        :'segment4' => :'AirlineSegment',
        :'ticket_issue_city' => :'String',
        :'ticket_issue_date' => :'Date',
        :'ticket_issue_name' => :'String',
        :'ticket_no' => :'String',
        :'transaction_type' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CityPayApiClient::AirlineAdvice` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CityPayApiClient::AirlineAdvice`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'carrier_name')
        self.carrier_name = attributes[:'carrier_name']
      else
        self.carrier_name = nil
      end

      if attributes.key?(:'conjunction_ticket_indicator')
        self.conjunction_ticket_indicator = attributes[:'conjunction_ticket_indicator']
      end

      if attributes.key?(:'eticket_indicator')
        self.eticket_indicator = attributes[:'eticket_indicator']
      end

      if attributes.key?(:'no_air_segments')
        self.no_air_segments = attributes[:'no_air_segments']
      end

      if attributes.key?(:'number_in_party')
        self.number_in_party = attributes[:'number_in_party']
      end

      if attributes.key?(:'original_ticket_no')
        self.original_ticket_no = attributes[:'original_ticket_no']
      end

      if attributes.key?(:'passenger_name')
        self.passenger_name = attributes[:'passenger_name']
      end

      if attributes.key?(:'segment1')
        self.segment1 = attributes[:'segment1']
      else
        self.segment1 = nil
      end

      if attributes.key?(:'segment2')
        self.segment2 = attributes[:'segment2']
      end

      if attributes.key?(:'segment3')
        self.segment3 = attributes[:'segment3']
      end

      if attributes.key?(:'segment4')
        self.segment4 = attributes[:'segment4']
      end

      if attributes.key?(:'ticket_issue_city')
        self.ticket_issue_city = attributes[:'ticket_issue_city']
      else
        self.ticket_issue_city = nil
      end

      if attributes.key?(:'ticket_issue_date')
        self.ticket_issue_date = attributes[:'ticket_issue_date']
      else
        self.ticket_issue_date = nil
      end

      if attributes.key?(:'ticket_issue_name')
        self.ticket_issue_name = attributes[:'ticket_issue_name']
      else
        self.ticket_issue_name = nil
      end

      if attributes.key?(:'ticket_no')
        self.ticket_no = attributes[:'ticket_no']
      else
        self.ticket_no = nil
      end

      if attributes.key?(:'transaction_type')
        self.transaction_type = attributes[:'transaction_type']
      else
        self.transaction_type = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @carrier_name.nil?
        invalid_properties.push('invalid value for "carrier_name", carrier_name cannot be nil.')
      end

      if @carrier_name.to_s.length > 25
        invalid_properties.push('invalid value for "carrier_name", the character length must be smaller than or equal to 25.')
      end

      if !@no_air_segments.nil? && @no_air_segments > 4
        invalid_properties.push('invalid value for "no_air_segments", must be smaller than or equal to 4.')
      end

      if !@no_air_segments.nil? && @no_air_segments < 0
        invalid_properties.push('invalid value for "no_air_segments", must be greater than or equal to 0.')
      end

      if !@original_ticket_no.nil? && @original_ticket_no.to_s.length > 14
        invalid_properties.push('invalid value for "original_ticket_no", the character length must be smaller than or equal to 14.')
      end

      if !@passenger_name.nil? && @passenger_name.to_s.length > 25
        invalid_properties.push('invalid value for "passenger_name", the character length must be smaller than or equal to 25.')
      end

      if @segment1.nil?
        invalid_properties.push('invalid value for "segment1", segment1 cannot be nil.')
      end

      if @ticket_issue_city.nil?
        invalid_properties.push('invalid value for "ticket_issue_city", ticket_issue_city cannot be nil.')
      end

      if @ticket_issue_city.to_s.length > 18
        invalid_properties.push('invalid value for "ticket_issue_city", the character length must be smaller than or equal to 18.')
      end

      if @ticket_issue_date.nil?
        invalid_properties.push('invalid value for "ticket_issue_date", ticket_issue_date cannot be nil.')
      end

      if @ticket_issue_name.nil?
        invalid_properties.push('invalid value for "ticket_issue_name", ticket_issue_name cannot be nil.')
      end

      if @ticket_issue_name.to_s.length > 26
        invalid_properties.push('invalid value for "ticket_issue_name", the character length must be smaller than or equal to 26.')
      end

      if @ticket_no.nil?
        invalid_properties.push('invalid value for "ticket_no", ticket_no cannot be nil.')
      end

      if @ticket_no.to_s.length > 14
        invalid_properties.push('invalid value for "ticket_no", the character length must be smaller than or equal to 14.')
      end

      if @transaction_type.nil?
        invalid_properties.push('invalid value for "transaction_type", transaction_type cannot be nil.')
      end

      if @transaction_type.to_s.length > 3
        invalid_properties.push('invalid value for "transaction_type", the character length must be smaller than or equal to 3.')
      end

      if @transaction_type.to_s.length < 3
        invalid_properties.push('invalid value for "transaction_type", the character length must be great than or equal to 3.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @carrier_name.nil?
      return false if @carrier_name.to_s.length > 25
      return false if !@no_air_segments.nil? && @no_air_segments > 4
      return false if !@no_air_segments.nil? && @no_air_segments < 0
      return false if !@original_ticket_no.nil? && @original_ticket_no.to_s.length > 14
      return false if !@passenger_name.nil? && @passenger_name.to_s.length > 25
      return false if @segment1.nil?
      return false if @ticket_issue_city.nil?
      return false if @ticket_issue_city.to_s.length > 18
      return false if @ticket_issue_date.nil?
      return false if @ticket_issue_name.nil?
      return false if @ticket_issue_name.to_s.length > 26
      return false if @ticket_no.nil?
      return false if @ticket_no.to_s.length > 14
      return false if @transaction_type.nil?
      return false if @transaction_type.to_s.length > 3
      return false if @transaction_type.to_s.length < 3
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] carrier_name Value to be assigned
    def carrier_name=(carrier_name)
      if carrier_name.nil?
        fail ArgumentError, 'carrier_name cannot be nil'
      end

      if carrier_name.to_s.length > 25
        fail ArgumentError, 'invalid value for "carrier_name", the character length must be smaller than or equal to 25.'
      end

      @carrier_name = carrier_name
    end

    # Custom attribute writer method with validation
    # @param [Object] no_air_segments Value to be assigned
    def no_air_segments=(no_air_segments)
      if no_air_segments.nil?
        fail ArgumentError, 'no_air_segments cannot be nil'
      end

      if no_air_segments > 4
        fail ArgumentError, 'invalid value for "no_air_segments", must be smaller than or equal to 4.'
      end

      if no_air_segments < 0
        fail ArgumentError, 'invalid value for "no_air_segments", must be greater than or equal to 0.'
      end

      @no_air_segments = no_air_segments
    end

    # Custom attribute writer method with validation
    # @param [Object] original_ticket_no Value to be assigned
    def original_ticket_no=(original_ticket_no)
      if original_ticket_no.nil?
        fail ArgumentError, 'original_ticket_no cannot be nil'
      end

      if original_ticket_no.to_s.length > 14
        fail ArgumentError, 'invalid value for "original_ticket_no", the character length must be smaller than or equal to 14.'
      end

      @original_ticket_no = original_ticket_no
    end

    # Custom attribute writer method with validation
    # @param [Object] passenger_name Value to be assigned
    def passenger_name=(passenger_name)
      if passenger_name.nil?
        fail ArgumentError, 'passenger_name cannot be nil'
      end

      if passenger_name.to_s.length > 25
        fail ArgumentError, 'invalid value for "passenger_name", the character length must be smaller than or equal to 25.'
      end

      @passenger_name = passenger_name
    end

    # Custom attribute writer method with validation
    # @param [Object] ticket_issue_city Value to be assigned
    def ticket_issue_city=(ticket_issue_city)
      if ticket_issue_city.nil?
        fail ArgumentError, 'ticket_issue_city cannot be nil'
      end

      if ticket_issue_city.to_s.length > 18
        fail ArgumentError, 'invalid value for "ticket_issue_city", the character length must be smaller than or equal to 18.'
      end

      @ticket_issue_city = ticket_issue_city
    end

    # Custom attribute writer method with validation
    # @param [Object] ticket_issue_name Value to be assigned
    def ticket_issue_name=(ticket_issue_name)
      if ticket_issue_name.nil?
        fail ArgumentError, 'ticket_issue_name cannot be nil'
      end

      if ticket_issue_name.to_s.length > 26
        fail ArgumentError, 'invalid value for "ticket_issue_name", the character length must be smaller than or equal to 26.'
      end

      @ticket_issue_name = ticket_issue_name
    end

    # Custom attribute writer method with validation
    # @param [Object] ticket_no Value to be assigned
    def ticket_no=(ticket_no)
      if ticket_no.nil?
        fail ArgumentError, 'ticket_no cannot be nil'
      end

      if ticket_no.to_s.length > 14
        fail ArgumentError, 'invalid value for "ticket_no", the character length must be smaller than or equal to 14.'
      end

      @ticket_no = ticket_no
    end

    # Custom attribute writer method with validation
    # @param [Object] transaction_type Value to be assigned
    def transaction_type=(transaction_type)
      if transaction_type.nil?
        fail ArgumentError, 'transaction_type cannot be nil'
      end

      if transaction_type.to_s.length > 3
        fail ArgumentError, 'invalid value for "transaction_type", the character length must be smaller than or equal to 3.'
      end

      if transaction_type.to_s.length < 3
        fail ArgumentError, 'invalid value for "transaction_type", the character length must be great than or equal to 3.'
      end

      @transaction_type = transaction_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          carrier_name == o.carrier_name &&
          conjunction_ticket_indicator == o.conjunction_ticket_indicator &&
          eticket_indicator == o.eticket_indicator &&
          no_air_segments == o.no_air_segments &&
          number_in_party == o.number_in_party &&
          original_ticket_no == o.original_ticket_no &&
          passenger_name == o.passenger_name &&
          segment1 == o.segment1 &&
          segment2 == o.segment2 &&
          segment3 == o.segment3 &&
          segment4 == o.segment4 &&
          ticket_issue_city == o.ticket_issue_city &&
          ticket_issue_date == o.ticket_issue_date &&
          ticket_issue_name == o.ticket_issue_name &&
          ticket_no == o.ticket_no &&
          transaction_type == o.transaction_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [carrier_name, conjunction_ticket_indicator, eticket_indicator, no_air_segments, number_in_party, original_ticket_no, passenger_name, segment1, segment2, segment3, segment4, ticket_issue_city, ticket_issue_date, ticket_issue_name, ticket_no, transaction_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = CityPayApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
