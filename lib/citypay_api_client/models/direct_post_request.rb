=begin
#CityPay Payment API

# This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 

Contact: support@citypay.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module CityPayApiClient
  class DirectPostRequest
    # The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.  No decimal points are to be included and no divisional characters such as 1,024.  The amount should be the total amount required for the transaction.  For example with GBP £1,021.95 the amount value is 102195. 
    attr_accessor :amount

    # A policy value which determines whether an AVS postcode policy is enforced or bypassed.  Values are  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.   `2` to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.   `3` to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation. 
    attr_accessor :avs_postcode_policy

    attr_accessor :bill_to

    # The card number (PAN) with a variable length to a maximum of 21 digits in numerical form. Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the provided value.  The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.  The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.  When providing the card number to our gateway through the authorisation API you will be handling the card data on your application. This will require further PCI controls to be in place and this value must never be stored. 
    attr_accessor :cardnumber

    # The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card (American Express has it on the front). The value helps to identify posession of the card as it is not available within the chip or magnetic swipe.  When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped out by any integer parsing.  The CSC number aids fraud prevention in Mail Order and Internet payments.  Business rules are available on your account to identify whether to accept or decline transactions based on mismatched results of the CSC.  The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.  This applies to all entities handling card data.  It should also not be used in any hashing process.  CityPay do not store the value and have no method of retrieving the value once the transaction has been processed. For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm. 
    attr_accessor :csc

    # A policy value which determines whether a CSC policy is enforced or bypassed.  Values are  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   `1` for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.   `2` to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.   `3` to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation. 
    attr_accessor :csc_policy

    # The processing currency for the transaction. Will default to the merchant account currency.
    attr_accessor :currency

    # A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window of time set against your account within which it can action. If a previous transaction with matching values occurred within the window, any subsequent transaction will result in a T001 result.  Values are  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   `1` for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.   `2` to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.   `3` to ignore. Transactions that are ignored will have the same affect as bypass. 
    attr_accessor :duplicate_policy

    # The month of expiry of the card. The month value should be a numerical value between 1 and 12. 
    attr_accessor :expmonth

    # The year of expiry of the card. 
    attr_accessor :expyear

    # The identifier of the transaction to process. The value should be a valid reference and may be used to perform  post processing actions and to aid in reconciliation of transactions.  The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.  The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) this will aid in ensuring each transaction is identifiable.  When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent request will ensure that a transaction is considered as different. 
    attr_accessor :identifier

    # A message authentication code ensures the data is authentic and that the intended amount has not been tampered with. The mac value is generated using a hash-based mac value. The following algorithm is used. - A key (k) is derived from your licence key - A value (v) is produced by concatenating the nonce, amount value and identifier, such as a purchase   with nonce `0123456789ABCDEF` an amount of £275.95 and an identifier of OD-12345678 would become   `0123456789ABCDEF27595OD-12345678` and extracting the UTF-8 byte values - The result from HMAC_SHA256(k, v) is hex-encoded (upper-case) - For instance, a licence key of `LK123456789`, a nonce of `0123456789ABCDEF`, an amount of `27595` and an identifier of `OD-12345678`  would generate a MAC of `163DBAB194D743866A9BCC7FC9C8A88FCD99C6BBBF08D619291212D1B91EE12E`. 
    attr_accessor :mac

    # A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.  Values are  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.   `2` to bypass. Transactions that are bypassed will be allowed through even if the address did not match.   `3` to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation. 
    attr_accessor :match_avsa

    # The card holder name as appears on the card such as MR N E BODY. Required for some acquirers. 
    attr_accessor :name_on_card

    # A random value Hex string (uppercase) which is provided to the API to perform a digest. The value will be used in any digest function. 
    attr_accessor :nonce

    # The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request. 
    attr_accessor :redirect_failure

    # The URL used to redirect back to your site when a transaction has been tokenised or authorised. Required if a url-encoded request. 
    attr_accessor :redirect_success

    attr_accessor :ship_to

    attr_accessor :threedsecure

    # Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id.
    attr_accessor :trans_info

    # The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field.
    attr_accessor :trans_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'amount' => :'amount',
        :'avs_postcode_policy' => :'avs_postcode_policy',
        :'bill_to' => :'bill_to',
        :'cardnumber' => :'cardnumber',
        :'csc' => :'csc',
        :'csc_policy' => :'csc_policy',
        :'currency' => :'currency',
        :'duplicate_policy' => :'duplicate_policy',
        :'expmonth' => :'expmonth',
        :'expyear' => :'expyear',
        :'identifier' => :'identifier',
        :'mac' => :'mac',
        :'match_avsa' => :'match_avsa',
        :'name_on_card' => :'name_on_card',
        :'nonce' => :'nonce',
        :'redirect_failure' => :'redirect_failure',
        :'redirect_success' => :'redirect_success',
        :'ship_to' => :'ship_to',
        :'threedsecure' => :'threedsecure',
        :'trans_info' => :'trans_info',
        :'trans_type' => :'trans_type'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'amount' => :'Integer',
        :'avs_postcode_policy' => :'String',
        :'bill_to' => :'ContactDetails',
        :'cardnumber' => :'String',
        :'csc' => :'String',
        :'csc_policy' => :'String',
        :'currency' => :'String',
        :'duplicate_policy' => :'String',
        :'expmonth' => :'Integer',
        :'expyear' => :'Integer',
        :'identifier' => :'String',
        :'mac' => :'String',
        :'match_avsa' => :'String',
        :'name_on_card' => :'String',
        :'nonce' => :'String',
        :'redirect_failure' => :'String',
        :'redirect_success' => :'String',
        :'ship_to' => :'ContactDetails',
        :'threedsecure' => :'ThreeDSecure',
        :'trans_info' => :'String',
        :'trans_type' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CityPayApiClient::DirectPostRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CityPayApiClient::DirectPostRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'avs_postcode_policy')
        self.avs_postcode_policy = attributes[:'avs_postcode_policy']
      end

      if attributes.key?(:'bill_to')
        self.bill_to = attributes[:'bill_to']
      end

      if attributes.key?(:'cardnumber')
        self.cardnumber = attributes[:'cardnumber']
      end

      if attributes.key?(:'csc')
        self.csc = attributes[:'csc']
      end

      if attributes.key?(:'csc_policy')
        self.csc_policy = attributes[:'csc_policy']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'duplicate_policy')
        self.duplicate_policy = attributes[:'duplicate_policy']
      end

      if attributes.key?(:'expmonth')
        self.expmonth = attributes[:'expmonth']
      end

      if attributes.key?(:'expyear')
        self.expyear = attributes[:'expyear']
      end

      if attributes.key?(:'identifier')
        self.identifier = attributes[:'identifier']
      end

      if attributes.key?(:'mac')
        self.mac = attributes[:'mac']
      end

      if attributes.key?(:'match_avsa')
        self.match_avsa = attributes[:'match_avsa']
      end

      if attributes.key?(:'name_on_card')
        self.name_on_card = attributes[:'name_on_card']
      end

      if attributes.key?(:'nonce')
        self.nonce = attributes[:'nonce']
      end

      if attributes.key?(:'redirect_failure')
        self.redirect_failure = attributes[:'redirect_failure']
      end

      if attributes.key?(:'redirect_success')
        self.redirect_success = attributes[:'redirect_success']
      end

      if attributes.key?(:'ship_to')
        self.ship_to = attributes[:'ship_to']
      end

      if attributes.key?(:'threedsecure')
        self.threedsecure = attributes[:'threedsecure']
      end

      if attributes.key?(:'trans_info')
        self.trans_info = attributes[:'trans_info']
      end

      if attributes.key?(:'trans_type')
        self.trans_type = attributes[:'trans_type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @amount.nil?
        invalid_properties.push('invalid value for "amount", amount cannot be nil.')
      end

      if @cardnumber.nil?
        invalid_properties.push('invalid value for "cardnumber", cardnumber cannot be nil.')
      end

      if @cardnumber.to_s.length > 22
        invalid_properties.push('invalid value for "cardnumber", the character length must be smaller than or equal to 22.')
      end

      if @cardnumber.to_s.length < 12
        invalid_properties.push('invalid value for "cardnumber", the character length must be great than or equal to 12.')
      end

      if !@csc.nil? && @csc.to_s.length > 4
        invalid_properties.push('invalid value for "csc", the character length must be smaller than or equal to 4.')
      end

      if !@csc.nil? && @csc.to_s.length < 3
        invalid_properties.push('invalid value for "csc", the character length must be great than or equal to 3.')
      end

      if !@currency.nil? && @currency.to_s.length > 3
        invalid_properties.push('invalid value for "currency", the character length must be smaller than or equal to 3.')
      end

      if !@currency.nil? && @currency.to_s.length < 3
        invalid_properties.push('invalid value for "currency", the character length must be great than or equal to 3.')
      end

      if @expmonth.nil?
        invalid_properties.push('invalid value for "expmonth", expmonth cannot be nil.')
      end

      if @expmonth > 12
        invalid_properties.push('invalid value for "expmonth", must be smaller than or equal to 12.')
      end

      if @expmonth < 1
        invalid_properties.push('invalid value for "expmonth", must be greater than or equal to 1.')
      end

      if @expyear.nil?
        invalid_properties.push('invalid value for "expyear", expyear cannot be nil.')
      end

      if @expyear > 2100
        invalid_properties.push('invalid value for "expyear", must be smaller than or equal to 2100.')
      end

      if @expyear < 2000
        invalid_properties.push('invalid value for "expyear", must be greater than or equal to 2000.')
      end

      if @identifier.nil?
        invalid_properties.push('invalid value for "identifier", identifier cannot be nil.')
      end

      if @identifier.to_s.length > 50
        invalid_properties.push('invalid value for "identifier", the character length must be smaller than or equal to 50.')
      end

      if @identifier.to_s.length < 4
        invalid_properties.push('invalid value for "identifier", the character length must be great than or equal to 4.')
      end

      if @mac.nil?
        invalid_properties.push('invalid value for "mac", mac cannot be nil.')
      end

      if !@name_on_card.nil? && @name_on_card.to_s.length > 45
        invalid_properties.push('invalid value for "name_on_card", the character length must be smaller than or equal to 45.')
      end

      if !@name_on_card.nil? && @name_on_card.to_s.length < 2
        invalid_properties.push('invalid value for "name_on_card", the character length must be great than or equal to 2.')
      end

      if !@trans_info.nil? && @trans_info.to_s.length > 50
        invalid_properties.push('invalid value for "trans_info", the character length must be smaller than or equal to 50.')
      end

      if !@trans_type.nil? && @trans_type.to_s.length > 1
        invalid_properties.push('invalid value for "trans_type", the character length must be smaller than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @amount.nil?
      return false if @cardnumber.nil?
      return false if @cardnumber.to_s.length > 22
      return false if @cardnumber.to_s.length < 12
      return false if !@csc.nil? && @csc.to_s.length > 4
      return false if !@csc.nil? && @csc.to_s.length < 3
      return false if !@currency.nil? && @currency.to_s.length > 3
      return false if !@currency.nil? && @currency.to_s.length < 3
      return false if @expmonth.nil?
      return false if @expmonth > 12
      return false if @expmonth < 1
      return false if @expyear.nil?
      return false if @expyear > 2100
      return false if @expyear < 2000
      return false if @identifier.nil?
      return false if @identifier.to_s.length > 50
      return false if @identifier.to_s.length < 4
      return false if @mac.nil?
      return false if !@name_on_card.nil? && @name_on_card.to_s.length > 45
      return false if !@name_on_card.nil? && @name_on_card.to_s.length < 2
      return false if !@trans_info.nil? && @trans_info.to_s.length > 50
      return false if !@trans_type.nil? && @trans_type.to_s.length > 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] amount Value to be assigned
    def amount=(amount)
      if amount.nil?
        fail ArgumentError, 'amount cannot be nil'
      end

      @amount = amount
    end

    # Custom attribute writer method with validation
    # @param [Object] cardnumber Value to be assigned
    def cardnumber=(cardnumber)
      if cardnumber.nil?
        fail ArgumentError, 'cardnumber cannot be nil'
      end

      if cardnumber.to_s.length > 22
        fail ArgumentError, 'invalid value for "cardnumber", the character length must be smaller than or equal to 22.'
      end

      if cardnumber.to_s.length < 12
        fail ArgumentError, 'invalid value for "cardnumber", the character length must be great than or equal to 12.'
      end

      @cardnumber = cardnumber
    end

    # Custom attribute writer method with validation
    # @param [Object] csc Value to be assigned
    def csc=(csc)
      if !csc.nil? && csc.to_s.length > 4
        fail ArgumentError, 'invalid value for "csc", the character length must be smaller than or equal to 4.'
      end

      if !csc.nil? && csc.to_s.length < 3
        fail ArgumentError, 'invalid value for "csc", the character length must be great than or equal to 3.'
      end

      @csc = csc
    end

    # Custom attribute writer method with validation
    # @param [Object] currency Value to be assigned
    def currency=(currency)
      if !currency.nil? && currency.to_s.length > 3
        fail ArgumentError, 'invalid value for "currency", the character length must be smaller than or equal to 3.'
      end

      if !currency.nil? && currency.to_s.length < 3
        fail ArgumentError, 'invalid value for "currency", the character length must be great than or equal to 3.'
      end

      @currency = currency
    end

    # Custom attribute writer method with validation
    # @param [Object] expmonth Value to be assigned
    def expmonth=(expmonth)
      if expmonth.nil?
        fail ArgumentError, 'expmonth cannot be nil'
      end

      if expmonth > 12
        fail ArgumentError, 'invalid value for "expmonth", must be smaller than or equal to 12.'
      end

      if expmonth < 1
        fail ArgumentError, 'invalid value for "expmonth", must be greater than or equal to 1.'
      end

      @expmonth = expmonth
    end

    # Custom attribute writer method with validation
    # @param [Object] expyear Value to be assigned
    def expyear=(expyear)
      if expyear.nil?
        fail ArgumentError, 'expyear cannot be nil'
      end

      if expyear > 2100
        fail ArgumentError, 'invalid value for "expyear", must be smaller than or equal to 2100.'
      end

      if expyear < 2000
        fail ArgumentError, 'invalid value for "expyear", must be greater than or equal to 2000.'
      end

      @expyear = expyear
    end

    # Custom attribute writer method with validation
    # @param [Object] identifier Value to be assigned
    def identifier=(identifier)
      if identifier.nil?
        fail ArgumentError, 'identifier cannot be nil'
      end

      if identifier.to_s.length > 50
        fail ArgumentError, 'invalid value for "identifier", the character length must be smaller than or equal to 50.'
      end

      if identifier.to_s.length < 4
        fail ArgumentError, 'invalid value for "identifier", the character length must be great than or equal to 4.'
      end

      @identifier = identifier
    end

    # Custom attribute writer method with validation
    # @param [Object] name_on_card Value to be assigned
    def name_on_card=(name_on_card)
      if !name_on_card.nil? && name_on_card.to_s.length > 45
        fail ArgumentError, 'invalid value for "name_on_card", the character length must be smaller than or equal to 45.'
      end

      if !name_on_card.nil? && name_on_card.to_s.length < 2
        fail ArgumentError, 'invalid value for "name_on_card", the character length must be great than or equal to 2.'
      end

      @name_on_card = name_on_card
    end

    # Custom attribute writer method with validation
    # @param [Object] trans_info Value to be assigned
    def trans_info=(trans_info)
      if !trans_info.nil? && trans_info.to_s.length > 50
        fail ArgumentError, 'invalid value for "trans_info", the character length must be smaller than or equal to 50.'
      end

      @trans_info = trans_info
    end

    # Custom attribute writer method with validation
    # @param [Object] trans_type Value to be assigned
    def trans_type=(trans_type)
      if !trans_type.nil? && trans_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "trans_type", the character length must be smaller than or equal to 1.'
      end

      @trans_type = trans_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          amount == o.amount &&
          avs_postcode_policy == o.avs_postcode_policy &&
          bill_to == o.bill_to &&
          cardnumber == o.cardnumber &&
          csc == o.csc &&
          csc_policy == o.csc_policy &&
          currency == o.currency &&
          duplicate_policy == o.duplicate_policy &&
          expmonth == o.expmonth &&
          expyear == o.expyear &&
          identifier == o.identifier &&
          mac == o.mac &&
          match_avsa == o.match_avsa &&
          name_on_card == o.name_on_card &&
          nonce == o.nonce &&
          redirect_failure == o.redirect_failure &&
          redirect_success == o.redirect_success &&
          ship_to == o.ship_to &&
          threedsecure == o.threedsecure &&
          trans_info == o.trans_info &&
          trans_type == o.trans_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount, avs_postcode_policy, bill_to, cardnumber, csc, csc_policy, currency, duplicate_policy, expmonth, expyear, identifier, mac, match_avsa, name_on_card, nonce, redirect_failure, redirect_success, ship_to, threedsecure, trans_info, trans_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = CityPayApiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
