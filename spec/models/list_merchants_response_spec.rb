=begin
#CityPay Payment API

# This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 

Contact: support@citypay.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for CityPayApiClient::ListMerchantsResponse
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ListMerchantsResponse' do
  before do
    # run before each test
    json1 = '
{
    "ListMerchantsResponse": {
        "client_name": "CityPay Demo",
        "clientid": "PC123456",
        "merchants": [
            {
                "currency": "GBP",
                "merchantid": 12345678,
                "name": "CityPay One",
                "status": "T",
                "status_label": "Test"
            },
            {
                "currency": "GBP",
                "merchantid": 87654321,
                "name": "CityPay Two",
                "status": "T",
                "status_label": "Test"
            }
        ]
    }
}'

    json2 = '
{
        "client_name": "CityPay Demo",
        "clientid": "PC123456",
        "merchants": [
            {
                "currency": "GBP",
                "merchantid": 12345678,
                "name": "CityPay One",
                "status": "T",
                "status_label": "Test"
            },
            {
                "currency": "GBP",
                "merchantid": 87654321,
                "name": "CityPay Two",
                "status": "T",
                "status_label": "Test"
            }
        ]
}'

    data1 = JSON.parse(json1, :symbolize_names => true)
    data2 = JSON.parse(json2, :symbolize_names => true)
    @instance1 = CityPayApiClient::ApiClient.new.convert_to_type(data1, "ListMerchantsResponse")
    @instance2 = CityPayApiClient::ApiClient.new.convert_to_type(data2, "ListMerchantsResponse")
  end

  after do
    # run after each test
  end

  describe 'test an instance of ListMerchantsResponse' do
    it 'should create an instance of ListMerchantsResponse' do
      expect(@instance1).to be_instance_of(CityPayApiClient::ListMerchantsResponse)
      expect(@instance2).to be_instance_of(CityPayApiClient::ListMerchantsResponse)
    end
  end
  describe 'test attribute "client_name"' do
    it 'should work' do
      expect(@instance1.client_name).to eq("CityPay Demo")
      expect(@instance2.client_name).to eq("CityPay Demo")
    end
  end

  describe 'test attribute "clientid"' do
    it 'should work' do
      expect(@instance1.clientid).to eq("PC123456")
      expect(@instance2.clientid).to eq("PC123456")
    end
  end

  describe 'test attribute "merchants"' do
    it 'should work' do
      expect(@instance1.merchants.length).to eq(2)
      i1 = @instance1.merchants[0]
      expect(i1.currency).to eq('GBP')
      expect(i1.merchantid).to eq(12345678)
      expect(i1.name).to eq("CityPay One")
      expect(i1.status).to eq("T")
      expect(i1.status_label).to eq("Test")
      ii1 = @instance1.merchants[1]
      expect(ii1.currency).to eq('GBP')
      expect(ii1.merchantid).to eq(87654321)
      expect(ii1.name).to eq("CityPay Two")
      expect(ii1.status).to eq("T")
      expect(ii1.status_label).to eq("Test")
      expect(@instance2.merchants.length).to eq(2)
      i2 = @instance2.merchants[0]
      expect(i2.currency).to eq('GBP')
      expect(i2.merchantid).to eq(12345678)
      expect(i2.name).to eq("CityPay One")
      expect(i2.status).to eq("T")
      expect(i2.status_label).to eq("Test")
      ii2 = @instance2.merchants[1]
      expect(ii2.currency).to eq('GBP')
      expect(ii2.merchantid).to eq(87654321)
      expect(ii2.name).to eq("CityPay Two")
      expect(ii2.status).to eq("T")
      expect(ii2.status_label).to eq("Test")
    end
  end

end
