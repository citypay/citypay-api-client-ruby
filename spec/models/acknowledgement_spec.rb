=begin
#CityPay Payment API

# This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 

Contact: support@citypay.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for CityPayApiClient::Acknowledgement
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'Acknowledgement' do
  before do
    # run before each test
    json1 = '
    {
      "code": "000",
      "context": "1B12WmDZB3EYSbb",
      "identifier": "testIdentifier",
      "message": "System: Accepted Transaction"
    }
'

    json2 = '
    { "Acknowledgement": {
      "code": "000",
      "context": "1B12WmDZB3EYSbb",
      "identifier": "testIdentifier",
      "message": "System: Accepted Transaction"
    }}
'

    @instance1 = CityPayApiClient::ApiClient.new.convert_to_type(JSON.parse(json1, :symbolize_names => true), "Acknowledgement")
    @instance2 = CityPayApiClient::ApiClient.new.convert_to_type(JSON.parse(json2, :symbolize_names => true), "Acknowledgement")
  end

  after do
    # run after each test
  end

  describe 'test an instance of Acknowledgement' do
    it 'should create an instance of Acknowledgement' do
      expect(@instance1).to be_instance_of(CityPayApiClient::Acknowledgement)
      expect(@instance2).to be_instance_of(CityPayApiClient::Acknowledgement)
    end
  end
  describe 'test attribute "code"' do
    it 'should work' do
      expect(@instance1.code).to eq("000")
      expect(@instance2.code).to eq("000")
    end
  end

  describe 'test attribute "context"' do
    it 'should work' do
      expect(@instance1.context).to eq("1B12WmDZB3EYSbb")
      expect(@instance2.context).to eq("1B12WmDZB3EYSbb")
    end
  end

  describe 'test attribute "identifier"' do
    it 'should work' do
      expect(@instance1.identifier).to eq("testIdentifier")
      expect(@instance2.identifier).to eq("testIdentifier")
    end
  end

  describe 'test attribute "message"' do
    it 'should work' do
      expect(@instance1.message).to eq("System: Accepted Transaction")
      expect(@instance2.message).to eq("System: Accepted Transaction")
    end
  end

end
