=begin
#CityPay Payment API

# This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 

Contact: support@citypay.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for CityPayApiClient::AuthReferences
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'AuthReferences' do
  before do
    # run before each test

    json = '
    {
        "auths": [
            {
                "amount": "0.12",
                "amount_value": 12,
                "atrn": null,
                "authcode": "A12345",
                "batchno": null,
                "currency": "GBP",
                "datetime": "2020-07-21T15:55:04Z",
                "identifier": "TestingAPI",
                "maskedpan": "400000******0000",
                "merchantid": 12345678,
                "result": "Accepted",
                "trans_status": "O",
                "trans_type": "S",
                "transno": 88
            }
        ]
}'

    data = JSON.parse(json, :symbolize_names => true)
    @instance = CityPayApiClient::ApiClient.new.convert_to_type(data, "AuthReferences")
  end

  after do
    # run after each test
  end

  describe 'test an instance of AuthReferences' do
    it 'should create an instance of AuthReferences' do
      expect(@instance).to be_instance_of(CityPayApiClient::AuthReferences)
    end
  end
  describe 'test attribute "auths"' do
    it 'should work' do
      expect(@instance.auths.length).to eq(1)
      i = @instance.auths[0]
      expect(i.amount).to eq("0.12")
      expect(i.amount_value).to eq(12)
      expect(i.atrn).to eq(nil)
      expect(i.authcode).to eq("A12345")
      expect(i.batchno).to eq(nil)
      expect(i.currency).to eq("GBP")
      expect(i.datetime).to eq(Time.parse("2020-07-21T15:55:04Z"))
      expect(i.identifier).to eq("TestingAPI")
      expect(i.maskedpan).to eq("400000******0000")
      expect(i.merchantid).to eq(12345678)
      expect(i.result).to eq("Accepted")
      expect(i.trans_status).to eq("O")
      expect(i.trans_type).to eq("S")
      expect(i.transno).to eq(88)
    end
  end

end
